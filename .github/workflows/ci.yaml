name: CI

on: push

jobs:
  dependencies:
    runs-on: ${{ matrix.os }}
    env:
      STACK_YAML: ${{ github.workspace }}/stack-${{ matrix.ghc }}.yaml
    strategy:
      fail-fast: false
      matrix:
        ghc: ['9.4', '9.6']
        os:  [ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Download Stack
      run: ./ci/download-stack.sh
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.stack
        key: ${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles(env.STACK_YAML, format('{0}.lock', env.STACK_YAML)) }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles(env.STACK_YAML, format('{0}.lock', env.STACK_YAML)) }}
          ${{ matrix.os }}-${{ matrix.ghc }}
    - name: Install dependencies
      run: ./stack build --test --only-dependencies
  tests:
    runs-on: ${{ matrix.os }}
    needs: dependencies
    env:
      STACK_YAML: ${{ github.workspace }}/stack-${{ matrix.ghc }}.yaml
    strategy:
      fail-fast: false
      matrix:
        ghc: ['9.4', '9.6']
        os:  [ubuntu-latest]
        project:
        - aws-checkip
        - aws-rds
        - aws-secrets
        - aws-temporary-ingress-rule
        - bounded
        - cbt
        - conversions
        - dbt
        - devtools
        - http-mclient
        - lambda-alb
        - lambda-runtime
        - lht
        - mio-amazonka
        - mio-core
        - mio-log
        - oauth
        - openapi
        - pgt
        - source-constraints
        - stack-deploy
        - tasty-mgolden
        - xray
    steps:
    - uses: actions/checkout@v4
    - name: Download Stack
      run: ./ci/download-stack.sh
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.stack
        key: ${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles(env.STACK_YAML, format('{0}.lock', env.STACK_YAML)) }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles(env.STACK_YAML, format('{0}.lock', env.STACK_YAML)) }}
          ${{ matrix.os }}-${{ matrix.ghc }}
    - name: Install dependencies
      run: ./stack build --test --only-dependencies
    - name: Build
      if: matrix.project != 'pgt'
      run: ./stack build --fast --test --no-run-tests ${{ matrix.project }}
    - name: Build pgt binary
      if: matrix.project == 'pgt'
      run: ./stack build --fast --test --no-run-tests --copy-bins --flag pgt:build-executable ${{ matrix.project }}
    - name: Run tests
      run: ./stack build --fast --test ${{ matrix.project }}
    - name: Add pgt binary artifact
      if: matrix.project == 'pgt' && matrix.ghc == '9.4'
      uses: actions/upload-artifact@v4
      with:
        name: pgt-linux-x86-64
        path: /home/runner/.local/bin/pgt
        if-no-files-found: error
    - name: Upload latest pgt release
      if: ${{ matrix.project == 'pgt' && github.ref == 'refs/heads/main' }}
      run: |
        name=pgt-latest-linux-x86-64

        # Initialize the latest release
        gh release create "$name" --title "$name" --notes 'Latest linux x86 release of pgt' --repo ${{ github.repository }} 2> /dev/null || true

        # Upload the latest release
        gh release upload "$name" "$HOME/.local/bin/pgt" --clobber --repo ${{ github.repository }}
      env:
        GH_TOKEN: ${{ github.token }}
  all-checks:
    runs-on: ubuntu-latest
    name: All Checks Pass
    needs:
    - tests
    steps:
    - run: exit 0
